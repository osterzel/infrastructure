#cloud-config
ssh_authorized_keys:
  - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCXP0R6oA3/q7xeX++rjsZCR4mw69KZZQcDWamS8Aj+/gMO5xx7QZvf/3RYhDF/QZNix0GSG80x2KRZnwbTo/wnFp06BEeRYU3FHGOrS33O5Z4hn5THXUeiZdCUMQxeK03Lj+ajFHile20Eqx23RZwCkKWPY2hrneehLR02o1n8l1kSSxrKozLRge+uPrV1IVBszqZDcyXQ7KK5N3N/nmNnb81chZH8UGT0MlJbqKL90v+LdliVtwT9hKK2C0v3bHgDo+rPImEVMzXg85+kso88paZKntlvXSAbg9KfKHHKms/iykOhsnURPb99S/uR4Q8wUQd6piwBGcMR2hQ1P8KB allan@adegnan.net
coreos:
  etcd2:
    name: "%H"
    advertise-client-urls: "http://{{ public_ip }}:2379"
    initial-advertise-peer-urls: "http://{{ private_ip }}:2380"
    listen-client-urls: "http://0.0.0.0:2379,http://0.0.0.0:4001"
    listen-peer-urls: "http://{{ private_ip }}:2380,http://{{ private_ip }}:7001"
    initial-cluster: "{* initital_cluster *}"
    initial-cluster-state: "{{ initital_cluster_state }}"
  units:
    - name: etcd2.service
      drop-ins:
        - name: 10-wait-etcd2.conf
          content: |
            [Unit]
            After=var-lib-etcd2.mount
            Requires=var-lib-etcd2.mount
            [Service]
            ExecStartPre=/usr/bin/chown -R etcd:etcd /var/lib/etcd2
      command: start
      enable: true
    - name: fleet.service
      enable: false
    - name: flanneld.service
      command: start
      drop-ins:
        - name: 50-network-config.conf
          content: |
            [Service]
            ExecStartPre=/usr/bin/etcdctl set /coreos.com/network/config '{"Network":"10.10.0.0/16","Backend":{"Type":"vxlan"}}'
    - name: docker.service
      drop-ins:
        - name: 20-log-driver.conf
          content: |
            [Service]
            Environment=DOCKER_OPTS=--log-driver=journald
        - name: 60-docker-wait-for-flannel-config.conf
          content: |
            [Unit]
            After=flanneld.service
            Requires=flanneld.service
            Restart=always
      command: start
    - name: format-ephemeral-docker.service
      command: start
      content: |
        [Unit]
        Description=Formats the ephemeral drive
        After=dev-sda.device dev-sdb.device dev-sdc.device
        Requires=dev-sda.device dev-sdb.device dev-sdc.device
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/usr/sbin/wipefs -f /dev/disk/by-path/pci-0000:00:14.0-usb-0:2:1.0-scsi-0:0:0:0
        ExecStart=/usr/sbin/mkfs.xfs -f /dev/disk/by-path/pci-0000:00:14.0-usb-0:2:1.0-scsi-0:0:0:0
    - name: format-ephemeral-kubelet.service
      command: start
      content: |
        [Unit]
        Description=Formats the ephemeral drive
        After=dev-sda.device dev-sdb.device dev-sdc.device
        Requires=dev-sda.device dev-sdb.device dev-sdc.device
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/usr/sbin/wipefs -f /dev/disk/by-path/pci-0000:00:14.0-usb-0:4:1.0-scsi-0:0:0:0
        ExecStart=/usr/sbin/mkfs.xfs -f /dev/disk/by-path/pci-0000:00:14.0-usb-0:4:1.0-scsi-0:0:0:0
    - name: var-lib-docker.mount
      command: start
      content: |
        [Unit]
        Description=Mount ephemeral to /var/lib/docker
        Requires=format-ephemeral-docker.service
        After=format-ephemeral-docker.service
        [Mount]
        What=/dev/disk/by-path/pci-0000:00:14.0-usb-0:2:1.0-scsi-0:0:0:0
        Where=/var/lib/docker
        Type=xfs
    - name: var-lib-etcd2.mount
      command: start
      content: |
        [Unit]
        Description=Mount ephemeral to /var/lib/etcd2
        Requires=dev-sda.device dev-sdb.device dev-sdc.device
        After=dev-sda.device dev-sdb.device dev-sdc.device
        [Mount]
        What=/dev/disk/by-path/pci-0000:00:14.0-usb-0:3:1.0-scsi-0:0:0:0
        Where=/var/lib/etcd2
        Type=xfs
    - name: var-lib-kubelet.mount
      command: start
      content: |
        [Unit]
        Description=Mount ephemeral to /var/lib/kubelet
        Requires=format-ephemeral-kubelet.service
        After=format-ephemeral-kubelet.service
        [Mount]
        What=/dev/disk/by-path/pci-0000:00:14.0-usb-0:4:1.0-scsi-0:0:0:0
        Where=/var/lib/kubelet
        Type=xfs
    - name: docker.service
      drop-ins:
        - name: 10-wait-docker.conf
          content: |
            [Unit]
            After=var-lib-docker.mount
            Requires=var-lib-docker.mount
    - name: kube-kubelet.service
      command: start
      enabled: true
      content: |
        [Unit]
        Description=Kubernetes Kubelet
        Documentation=https://github.com/kubernetes/kubernetes
        Requires=docker.service etcd2.service
        After=docker.service etcd2.service

        [Service]
        Environment="API_MANIFEST_URL=http://nas.lan:8080/manifests/kube-apiserver.yaml"
        Environment="CONTROLLER_MANIFEST_URL=http://nas.lan:8080/manifests/kube-controller-manager.yaml"
        Environment="HYPBERKUBE_URL=https://storage.googleapis.com/kubernetes-release/release/{{ kubernetes_version }}/bin/linux/amd64/hyperkube"
        Environment="OUTPUT_FILE=/opt/bin/hyperkube"
        ExecStartPre=/usr/bin/mkdir -p /opt/bin
        ExecStartPre=/usr/bin/curl --silent -o ${OUTPUT_FILE} ${HYPBERKUBE_URL}
        ExecStartPre=/usr/bin/md5sum ${OUTPUT_FILE} 
        ExecStartPre=/usr/bin/chmod +x ${OUTPUT_FILE}
        ExecStartPre=/usr/bin/mkdir -p /etc/kubernetes/manifests
        ExecStartPre=/usr/bin/curl --silent -o /etc/kubernetes/manifests/kube-controller-manager.yaml ${CONTROLLER_MANIFEST_URL}
        ExecStartPre=/usr/bin/curl --silent -o /etc/kubernetes/manifests/kube-apiserver.yaml ${API_MANIFEST_URL}
        ExecStartPre=/usr/bin/mkdir -p /var/run/kubernetes
        ExecStartPre=/bin/sh -c '/usr/bin/etcdctl get /certs/tokens.csv > /var/run/kubernetes/tokens.csv'
        ExecStartPre=/bin/sh -c '/usr/bin/etcdctl get /certs/ca.pem > /var/run/kubernetes/ca.pem'
        ExecStartPre=/bin/sh -c '/usr/bin/etcdctl get /certs/kube-apiserver-server-key.pem > /var/run/kubernetes/kube-apiserver-server-key.pem'
        ExecStartPre=/bin/sh -c '/usr/bin/etcdctl get /certs/kube-apiserver-server.pem > /var/run/kubernetes/kube-apiserver-server.pem'
        ExecStartPre=/bin/sh -c '/usr/bin/etcdctl get /certs/kube-proxy-client-key.pem > /var/run/kubernetes/kube-proxy-client-key.pem'
        ExecStartPre=/bin/sh -c '/usr/bin/etcdctl get /certs/kube-proxy-client.pem > /var/run/kubernetes/kube-proxy-client.pem'
        ExecStartPre=/bin/sh -c '/usr/bin/etcdctl get /certs/kubelet-client-key.pem > /var/run/kubernetes/kubelet-client-key.pem'
        ExecStartPre=/bin/sh -c '/usr/bin/etcdctl get /certs/kubelet-client.pem > /var/run/kubernetes/kubelet-client.pem'
        ExecStart=/opt/bin/hyperkube kubelet \
          --api-servers=http://127.0.0.1:8080 \
          --manifest-url=${MANIFEST_URL} \
          --allow-privileged=true \
          --cloud-provider= \
          --cluster-dns=10.200.0.10 \
          --cluster-domain=cluster.local \
          --config=/etc/kubernetes/manifests \
          --serialize-image-pulls=false \
          --v=2
        Restart=always
        RestartSec=5

        [Install]
        WantedBy=multi-user.target
